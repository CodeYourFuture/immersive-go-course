version: '3.9'

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  fake-service:
    image: nicholasjackson/fake-service:v0.19.1
    container_name: fake-service
    environment:
      LISTEN_ADDR: 0.0.0.0:8080
      MESSAGE: "Hello World"
      SERVER_TYPE: "http"
      TIMING_50_PERCENTILE: "1000ms"
      TIMING_95_PERCENTILE: "4000ms"
      TIMING_99_PERCENTILE: "5000ms"
      ERROR_RATE: "0.2"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    volumes:
      - ./kafka-jmx-config.yml:/kafka-jmx-config.yml
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
      - "8999:8999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OPTS: -javaagent:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar=8999:/kafka-jmx-config.yml
    depends_on:
      - zoo1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  producer:
    build:
      context: .
      dockerfile: ./producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./cron.yaml:/cron.yaml
    command: ["/build", "--cronPath", "/cron.yaml", "--brokerList", "kafka:29092"]
  
  cluster-a:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    volumes:
      - ./scripts:/scripts
    command: ["/build", "--topic", "jobs-cluster-a", "--brokerList", "kafka:29092", "--retryTopic", "jobs-cluster-a-retries"]

  cluster-a-retries:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    volumes:
      - ./scripts:/scripts
    command: ["/build", "--topic", "jobs-cluster-a-retries", "--brokerList", "kafka:29092", "--retryTopic", "jobs-cluster-a-retries"]
  
  cluster-b:
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    command: ["/build", "--topic", "jobs-cluster-b", "--brokerList", "kafka:29092"]
  
  alertmanager:
    container_name: alertmanager
    hostname: alertmanager
    image: prom/alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - 9093:9093

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    links:
      - alertmanager:alertmanager
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    volumes:
      - ./grafana_datasources.yml:/etc/grafana/provisioning/datasources/all.yml
      - ./grafana_config.ini:/etc/grafana/config.ini
      - ./grafana_data:/var/lib/grafana
    ports:
      - 3000:3000